/***********EJERCICIO 3************/
@isTest
public class CaseTriggerTest {
    @testSetup
    static void createData(){
        List<Case> parentCases = new List<Case>();
		parentCases.add(new Case(Status='New', Origin='Email',Priority='Medium', Subject='PadreConHijos');
		parentCases.add(new Case(Status='New', Origin='Phone',Priority='Low', Subject='PadreSinHijos');
        insert parentCases;
		Case parentCase = [Select Id From Case limit 1];
        insert new Case(Status='New', Origin='Phone',Priority='Low', parentId = parentCase.Id);
    }
    @isTest
    static void actualizaconConHijos(){

        Case casoConHijos = [SELECT Id,Subject, Priority FROM Case WHERE Subject =  'PadreConHijos'];
		Case casoHijo = [SELECT Id,CaseNumber FROM Case WHERE ParentId =:  casoConhijos.Id];
		casoConHijos.priority = 'Low';
        Test.startTest();
        update casoConHijos;
		Test.stopTest();
		casoConHijos = [SELECT Id,Description FROM Case WHERE Subject =  'PadreConHijos'];
		system.assertEquals(casoConHijos.Description, casoHijo.caseNumber,'La descripción no ha sido actualizada correctamente');
    }
	
	@isTest
    static void actualizaconSinHijos(){

        Case casoSinHijos = [SELECT Id,Subject, Priority FROM Case WHERE Subject =  'PadreSinHijos'];
		casoSinHijos.priority = 'High';
        Test.startTest();
        update casoSinHijos;
		Test.stopTest();
		casoSinHijos = [SELECT Id,Description FROM Case WHERE Subject =  'PadreSinHijos'];
		system.assertEquals(casoConHijos.Description, 'Caso sin hijos','La descripción no ha sido actualizada correctamente');
    }
}